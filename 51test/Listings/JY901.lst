C51 COMPILER V9.57.0.0   JY901                                                             05/25/2023 17:01:40 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE JY901
OBJECT MODULE PLACED IN .\Objects\JY901.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE JY901.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(D:\Keil_v5\C51\Library;D:\
                    -KeilC51\library) DEBUG OBJECTEXTEND PRINT(.\Listings\JY901.lst) TABS(2) OBJECT(.\Objects\JY901.obj)

line level    source

   1          #include <string.h>
   2          #include  "config.h"
   3          #include  "STC15Fxxxx.H"
   4          #include "JY901.h"
   5          struct STime    stcTime={0};
   6          struct SAcc     stcAcc={0};
   7          struct SGyro    stcGyro={0};
   8          struct SAngle     stcAngle={0};
   9          struct SMag     stcMag={0};
  10          struct SDStatus   stcDStatus={0};
  11          struct SPress     stcPress={0};
  12          struct SLonLat    stcLonLat={0};
  13          struct SGPSV    stcGPSV={0};
  14          
  15          
  16          #define BaudRate1 9600            //串口波特率
  17          
  18          void setUART1(void)
  19          {
  20   1        //串口1接收设置，用于JY61P，使用上位机程序将JY61/61P/901波特率设为9600
  21   1        /*TR1 = 0;
  22   1        AUXR &= ~0x01;    //S1 BRT Use Timer1;
  23   1        AUXR |=  (1<<6);  //Timer1 set as 1T mode
  24   1        TMOD &= ~(1<<6);  //Timer1 set As Timer
  25   1        TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  26   1        TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / BaudRate1) / 256);
  27   1        TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / BaudRate1) % 256);
  28   1        ET1 = 0;  //禁止中断
  29   1        INT_CLKO &= ~0x02;  //不输出时钟
  30   1        TR1 = 1;    //定时器1开始启动
  31   1        
  32   1        SCON = (SCON & 0x3f) | 0x40;  //UART1模式，8位数据，可变波特率
  33   1        
  34   1        ES=1; REN=1;//允许中断,允许接收
  35   1        TI = 1;*/
  36   1        S1_USE_P36P37();
  37   1        SCON = 0x50;    //8位数据,可变波特率
  38   1        AUXR |= 0x40;   //定时器时钟1T模式
  39   1        AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
  40   1        TMOD &= 0x0F;   //设置定时器模式
  41   1        TL1 = 0xF3;     //设置定时初始值
  42   1        TH1 = 0xFC;     //设置定时初始值
  43   1        ET1 = 0;      //禁止定时器中断
  44   1        TR1 = 1;      //定时器1开始计时
  45   1        //TI = 1;
  46   1      }
  47          
  48          /*void CharToLong(char Dest[],char Source[])
  49          {
  50             *Dest    = Source[3];
  51             *(Dest+1)  = Source[2];
  52             *(Dest+2)  = Source[1];
  53             *(Dest+3)  = Source[0];
  54          }*/
C51 COMPILER V9.57.0.0   JY901                                                             05/25/2023 17:01:40 PAGE 2   

  55          void CopeSerialData(unsigned char ucData)
  56          {
  57   1        static unsigned char ucRxBuffer[12];
  58   1        static unsigned char ucRxCnt = 0; 
  59   1        
  60   1        ucRxBuffer[ucRxCnt++]=ucData;
  61   1        if (ucRxBuffer[0]!=0x55) //数据头不对，则重新开始寻找0x55数据头
  62   1        {
  63   2          ucRxCnt=0;
  64   2          return;                                                                   
  65   2        }
  66   1        if (ucRxCnt<11) {return;}//数据不满11个，则返回
  67   1        else
  68   1        {
  69   2          switch(ucRxBuffer[1])
  70   2          {
  71   3            /*case 0x50: stcTime.ucYear     = ucRxBuffer[2];
  72   3                  stcTime.ucMonth   = ucRxBuffer[3];
  73   3                  stcTime.ucDay     = ucRxBuffer[4];
  74   3                  stcTime.ucHour    = ucRxBuffer[5];
  75   3                  stcTime.ucMinute  = ucRxBuffer[6];
  76   3                  stcTime.ucSecond  = ucRxBuffer[7];
  77   3                  stcTime.usMiliSecond=((unsigned short)ucRxBuffer[9]<<8)|ucRxBuffer[8];
  78   3                  break;
  79   3            case 0x51:  stcAcc.a[0] = ((unsigned short)ucRxBuffer[3]<<8)|ucRxBuffer[2];
  80   3                  stcAcc.a[1] = ((unsigned short)ucRxBuffer[5]<<8)|ucRxBuffer[4];
  81   3                  stcAcc.a[2] = ((unsigned short)ucRxBuffer[7]<<8)|ucRxBuffer[6];
  82   3                  break;
  83   3            case 0x52:  stcGyro.w[0] = ((unsigned short)ucRxBuffer[3]<<8)|ucRxBuffer[2];
  84   3                  stcGyro.w[1] = ((unsigned short)ucRxBuffer[5]<<8)|ucRxBuffer[4];
  85   3                  stcGyro.w[2] = ((unsigned short)ucRxBuffer[7]<<8)|ucRxBuffer[6];
  86   3                  break;*/
  87   3            case 0x53:  stcAngle.Angle[0] = ((unsigned short)ucRxBuffer[3]<<8)|ucRxBuffer[2];
  88   3                  stcAngle.Angle[1] = ((unsigned short)ucRxBuffer[5]<<8)|ucRxBuffer[4];
  89   3                  stcAngle.Angle[2] = ((unsigned short)ucRxBuffer[7]<<8)|ucRxBuffer[6];
  90   3                  stcAngle.T = ((unsigned short)ucRxBuffer[9]<<8)|ucRxBuffer[8];
  91   3                  break;
  92   3            /*case 0x54:  stcMag.h[0] = ((unsigned short)ucRxBuffer[3]<<8)|ucRxBuffer[2];
  93   3                  stcMag.h[1] = ((unsigned short)ucRxBuffer[5]<<8)|ucRxBuffer[4];
  94   3                  stcMag.h[2] = ((unsigned short)ucRxBuffer[7]<<8)|ucRxBuffer[6];
  95   3                  stcAngle.T = ((unsigned short)ucRxBuffer[9]<<8)|ucRxBuffer[8];
  96   3                  break;
  97   3            case 0x55:  stcDStatus.sDStatus[0] = ((unsigned short)ucRxBuffer[3]<<8)|ucRxBuffer[2];
  98   3                  stcDStatus.sDStatus[1] = ((unsigned short)ucRxBuffer[5]<<8)|ucRxBuffer[4];
  99   3                  stcDStatus.sDStatus[2] = ((unsigned short)ucRxBuffer[7]<<8)|ucRxBuffer[6];
 100   3                  stcDStatus.sDStatus[3] = ((unsigned short)ucRxBuffer[9]<<8)|ucRxBuffer[8];
 101   3                  break;
 102   3            case 0x56:  ucRxBuffer[2] = 0x12;ucRxBuffer[3] = 0x34;ucRxBuffer[4] = 0x56;ucRxBuffer[5] = 0x78;
 103   3                  CharToLong((char*)&stcPress.lPressure,(char*)&ucRxBuffer[2]);
 104   3                  CharToLong((char*)&stcPress.lAltitude,(char*)&ucRxBuffer[6]);
 105   3                  break;
 106   3            case 0x57:  CharToLong((char*)&stcLonLat.lLon,(char*)&ucRxBuffer[2]);
 107   3                  CharToLong((char*)&stcLonLat.lLat,(char*)&ucRxBuffer[6]);
 108   3                  break;
 109   3            case 0x58:  stcGPSV.sGPSHeight = ((unsigned short)ucRxBuffer[3]<<8)|ucRxBuffer[2];
 110   3                  stcGPSV.sGPSYaw = ((unsigned short)ucRxBuffer[5]<<8)|ucRxBuffer[4];
 111   3                  CharToLong((char*)&stcGPSV.lGPSVelocity,(char*)&ucRxBuffer[6]);
 112   3                  break;*/
 113   3          }
 114   2          ucRxCnt=0;
 115   2        }
 116   1      }
C51 COMPILER V9.57.0.0   JY901                                                             05/25/2023 17:01:40 PAGE 3   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    163    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     85    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
